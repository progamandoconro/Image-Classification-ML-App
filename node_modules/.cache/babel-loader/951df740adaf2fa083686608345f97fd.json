{"ast":null,"code":"import _slicedToArray from \"/home/ro/Image-Classification-ML-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/ro/Image-Classification-ML-App/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport './firebase';\nimport { storage } from 'firebase';\n\nconst App = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        image = _useState2[0],\n        setImage = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        url = _useState4[0],\n        setURL = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        predictions = _useState6[0],\n        handlePredictions = _useState6[1];\n\n  const handleImage = e => {\n    setImage(e.target.files[0]);\n    console.log(image);\n  };\n\n  const db = storage().ref('/UserPics/' + Math.random());\n\n  const uploadImage = async () => {\n    await db.put(image);\n    db.getDownloadURL().then(e => setURL(e));\n  };\n\n  const myPrediction = async () => {\n    const loadModel = await mobilenet.load();\n    const img = document.getElementById('image');\n    img.setAttribute('crossOrigin', '');\n    console.log(img);\n    await loadModel.classify(img).then(function (p) {\n      // Classify the image\n      console.log('Predictions: ', p);\n      handlePredictions(p);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Real Time AI in browser for Image Classification\"), React.createElement(\"input\", {\n    type: \"file\",\n    onChange: e => handleImage(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: e => {\n      uploadImage(e.target.files);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Upload\"), React.createElement(\"img\", {\n    id: \"image\",\n    src: url || 'https://via.placeholder.com/400x300',\n    alt: \"\",\n    height: \"300\",\n    width: \"400\",\n    crossOrigin: \"anonymous\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => myPrediction(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \" Predict\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), predictions.map((e, k) => React.createElement(\"li\", {\n    key: k,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, e.className + ': ' + Math.round(e.probability * 100) + '%'))));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/ro/Image-Classification-ML-App/src/App.js"],"names":["React","useState","mobilenet","storage","App","image","setImage","url","setURL","predictions","handlePredictions","handleImage","e","target","files","console","log","db","ref","Math","random","uploadImage","put","getDownloadURL","then","myPrediction","loadModel","load","img","document","getElementById","setAttribute","classify","p","map","k","className","round","probability"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nimport * as mobilenet from '@tensorflow-models/mobilenet';\n\nimport './firebase';\nimport { storage } from 'firebase';\n\nconst App = () => {\n\tconst [ image, setImage ] = useState([]);\n\tconst [ url, setURL ] = useState('');\n\tconst [ predictions, handlePredictions ] = useState([]);\n\n\tconst handleImage = (e) => {\n\t\tsetImage(e.target.files[0]);\n\t\tconsole.log(image);\n\t};\n\tconst db = storage().ref('/UserPics/' + Math.random());\n\n\tconst uploadImage = async () => {\n\t\tawait db.put(image);\n\t\tdb.getDownloadURL().then((e) => setURL(e));\n\t};\n\n\tconst myPrediction = async () => {\n\t\tconst loadModel = await mobilenet.load();\n\t\tconst img = document.getElementById('image');\n\t\timg.setAttribute('crossOrigin', '');\n\t\tconsole.log(img);\n\t\tawait loadModel.classify(img).then(function(p) {\n\t\t\t// Classify the image\n\t\t\tconsole.log('Predictions: ', p);\n\t\t\thandlePredictions(p);\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Real Time AI in browser for Image Classification</h1>\n\t\t\t<input type=\"file\" onChange={(e) => handleImage(e)} />\n\t\t\t<hr />\n\t\t\t<br />\n\n\t\t\t<button\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tuploadImage(e.target.files);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tUpload\n\t\t\t</button>\n\t\t\t<img\n\t\t\t\tid=\"image\"\n\t\t\t\tsrc={url || 'https://via.placeholder.com/400x300'}\n\t\t\t\talt=\"\"\n\t\t\t\theight=\"300\"\n\t\t\t\twidth=\"400\"\n\t\t\t\tcrossOrigin=\"anonymous\"\n\t\t\t/>\n\t\t\t<br />\n\t\t\t<button onClick={() => myPrediction()}> Predict</button>\n\t\t\t<hr />\n\t\t\t{predictions.map((e, k) => (\n\t\t\t\t<li key={k}>\n\t\t\t\t\t<h1>{e.className + ': ' + Math.round(e.probability * 100) + '%'}</h1>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}