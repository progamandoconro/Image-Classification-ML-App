{"ast":null,"code":"import _slicedToArray from \"/home/ro/imgclassml/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/ro/imgclassml/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport photo from './assets/yoda.jpg';\nimport { loadImage } from 'canvas';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport './firebase';\nimport { storage } from 'firebase';\n\nconst App = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        res = _useState2[0],\n        handleRes = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        image = _useState4[0],\n        setImage = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        url = _useState6[0],\n        setURL = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        predictions = _useState8[0],\n        handlePredictions = _useState8[1];\n\n  const myPhoto = () => {\n    return React.createElement(\"img\", {\n      style: {\n        padding: '10px'\n      },\n      id: \"img\",\n      src: photo,\n      alt: \"foto \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    });\n  };\n\n  const myExamplePrediction = async () => {\n    const loadModel = await mobilenet.load();\n    const pic = await loadImage(photo);\n    const pred = await loadModel.classify(pic);\n    console.log(pred);\n    handleRes(pred);\n  };\n\n  const handleImage = e => {\n    setImage(e.target.files[0]);\n    console.log(image);\n  };\n\n  const db = storage().ref('/UserPics/' + Math.random());\n\n  const uploadImage = async () => {\n    await db.put(image);\n    db.getDownloadURL().then(e => setURL(e));\n  };\n\n  const myRealPrediction = async () => {\n    const loadModel = await mobilenet.load();\n    const img = document.getElementById('image');\n    img.setAttribute('crossOrigin', '');\n    console.log(img);\n    await loadModel.classify(img).then(function (p) {\n      // Classify the image\n      console.log('Predictions: ', p);\n      handlePredictions(p);\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Example: \"), myPhoto(), React.createElement(\"button\", {\n    onClick: e => myExamplePrediction(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Predict\"), res.map((e, k) => React.createElement(\"li\", {\n    key: k,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, e.className + ': ' + Math.round(e.probability * 100) + '%'))), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"file\",\n    onChange: e => handleImage(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: e => {\n      uploadImage(e.target.files);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Upload\"), React.createElement(\"img\", {\n    id: \"image\",\n    src: url || 'https://via.placeholder.com/400x300',\n    alt: \"\",\n    height: \"300\",\n    width: \"400\",\n    crossOrigin: \"anonymous\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => myRealPrediction(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \" Predict\"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), predictions.map((e, k) => React.createElement(\"li\", {\n    key: k,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, e.className + ': ' + Math.round(e.probability * 100) + '%'))));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/ro/imgclassml/src/App.js"],"names":["React","useState","photo","loadImage","mobilenet","storage","App","res","handleRes","image","setImage","url","setURL","predictions","handlePredictions","myPhoto","padding","myExamplePrediction","loadModel","load","pic","pred","classify","console","log","handleImage","e","target","files","db","ref","Math","random","uploadImage","put","getDownloadURL","then","myRealPrediction","img","document","getElementById","setAttribute","p","map","k","className","round","probability"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport photo from './assets/yoda.jpg';\nimport { loadImage } from 'canvas';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\n\nimport './firebase';\nimport { storage } from 'firebase';\n\nconst App = () => {\n\tconst [ res, handleRes ] = useState([]);\n\tconst [ image, setImage ] = useState([]);\n\tconst [ url, setURL ] = useState('');\n\tconst [ predictions, handlePredictions ] = useState([]);\n\n\tconst myPhoto = () => {\n\t\treturn <img style={{ padding: '10px' }} id=\"img\" src={photo} alt=\"foto \" />;\n\t};\n\tconst myExamplePrediction = async () => {\n\t\tconst loadModel = await mobilenet.load();\n\t\tconst pic = await loadImage(photo);\n\t\tconst pred = await loadModel.classify(pic);\n\n\t\tconsole.log(pred);\n\t\thandleRes(pred);\n\t};\n\n\tconst handleImage = (e) => {\n\t\tsetImage(e.target.files[0]);\n\t\tconsole.log(image);\n\t};\n\tconst db = storage().ref('/UserPics/' + Math.random());\n\n\tconst uploadImage = async () => {\n\t\tawait db.put(image);\n\t\tdb.getDownloadURL().then((e) => setURL(e));\n\t};\n\n\tconst myRealPrediction = async () => {\n\t\tconst loadModel = await mobilenet.load();\n\t\tconst img = document.getElementById('image');\n\t\timg.setAttribute('crossOrigin', '');\n\t\tconsole.log(img);\n\t\tawait loadModel.classify(img).then(function(p) {\n\t\t\t// Classify the image\n\t\t\tconsole.log('Predictions: ', p);\n\t\t\thandlePredictions(p);\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Example: </h1>\n\t\t\t{myPhoto()}\n\t\t\t<button onClick={(e) => myExamplePrediction(e)}>Predict</button>\n\t\t\t{res.map((e, k) => (\n\t\t\t\t<li key={k}>\n\t\t\t\t\t<h1>{e.className + ': ' + Math.round(e.probability * 100) + '%'}</h1>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t\t<hr />\n\t\t\t<input type=\"file\" onChange={(e) => handleImage(e)} />\n\t\t\t<hr />\n\t\t\t<br />\n\n\t\t\t<button\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tuploadImage(e.target.files);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tUpload\n\t\t\t</button>\n\t\t\t<img\n\t\t\t\tid=\"image\"\n\t\t\t\tsrc={url || 'https://via.placeholder.com/400x300'}\n\t\t\t\talt=\"\"\n\t\t\t\theight=\"300\"\n\t\t\t\twidth=\"400\"\n\t\t\t\tcrossOrigin=\"anonymous\"\n\t\t\t/>\n\t\t\t<br />\n\t\t\t<button onClick={() => myRealPrediction()}> Predict</button>\n\t\t\t<hr />\n\t\t\t{predictions.map((e, k) => (\n\t\t\t\t<li key={k}>\n\t\t\t\t\t<h1>{e.className + ': ' + Math.round(e.probability * 100) + '%'}</h1>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}