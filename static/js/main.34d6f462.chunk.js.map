{"version":3,"sources":["assets/logo.png","firebase.js","App.js","index.js"],"names":["module","exports","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useState","image","setImage","url","setURL","predictions","handlePredictions","db","storage","ref","Math","random","className","src","logo","alt","type","onChange","e","target","files","console","log","handleImage","onClick","a","async","put","getDownloadURL","then","id","crossOrigin","mobilenet","loadModel","img","document","getElementById","setAttribute","classify","p","myPrediction","map","k","key","round","probability","ReactDOM","render"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,qSCatCC,IAASC,KAAKC,QAClBF,IAASG,cAZK,CACdC,OAAQ,0CACRC,WAAY,6CACZC,YAAa,oDACbC,UAAW,6BACXC,cAAe,yCACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iB,YC8DDC,EA/DH,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACTC,EADS,KACFC,EADE,OAEOF,mBAAS,IAFhB,mBAETG,EAFS,KAEJC,EAFI,OAG0BJ,mBAAS,IAHnC,mBAGTK,EAHS,KAGIC,EAHJ,KASXC,EAAKC,oBAAUC,IAAI,aAAeC,KAAKC,UAmB7C,OACC,yBAAKC,UAAU,OACd,mFAEA,yBAAKC,IAAKC,IAAMC,IAAI,QAEpB,6BACA,6BACA,6CACA,gDACA,2BAAOC,KAAK,OAAOC,SAAU,SAACC,GAAD,OAjCX,SAACA,GACpBhB,EAASgB,EAAEC,OAAOC,MAAM,IACxBC,QAAQC,IAAIrB,GA+ByBsB,CAAYL,MAEhD,6BACA,gDACA,4BACCM,QAAS,SAACN,GACGA,EAAEC,OAAOC,MAjCL,EAAAK,EAAAC,OAAA,kEAAAD,EAAA,MACblB,EAAGoB,IAAI1B,IADM,OAEnBM,EAAGqB,iBAAiBC,MAAK,SAACX,GAAD,OAAOd,EAAOc,MAFpB,uCA+BlB,UAOA,yBAAKY,GAAG,QAAQjB,IAAKV,GAAO,sCAAuCY,IAAI,GAAGgB,YAAY,cACtF,6BACA,+EACA,4BAAQP,QAAS,kBApCE,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACIO,OADJ,cACdC,EADc,QAEdC,EAAMC,SAASC,eAAe,UAChCC,aAAa,cAAe,IAChChB,QAAQC,IAAIY,GAJQ,WAAAT,EAAA,MAKdQ,EAAUK,SAASJ,GAAKL,MAAK,SAASU,GAE3ClB,QAAQC,IAAI,gBAAiBiB,GAC7BjC,EAAkBiC,OARC,qCAoCIC,KAAvB,YACA,6BACCnC,EAAYoC,KAAI,SAACvB,EAAGwB,GAAJ,OAChB,wBAAIC,IAAKD,GACR,4BAAKxB,EAAEN,UAAY,KAAOF,KAAKkC,MAAsB,IAAhB1B,EAAE2B,aAAqB,WC5DjEC,IAASC,OAAO,kBAAC,EAAD,MAASZ,SAASC,eAAe,W","file":"static/js/main.34d6f462.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2d081569.png\";","import firebase from 'firebase/app';\n\nconst config = {\n\tapiKey: 'AIzaSyBIUa0UFimfB4uxT4kOGW_2ezcW6fGfw-8',\n\tauthDomain: 'ml-image-recognition-67ee0.firebaseapp.com',\n\tdatabaseURL: 'https://ml-image-recognition-67ee0.firebaseio.com',\n\tprojectId: 'ml-image-recognition-67ee0',\n\tstorageBucket: 'ml-image-recognition-67ee0.appspot.com',\n\tmessagingSenderId: '1030876500796',\n\tappId: '1:1030876500796:web:158f05589ab52a047e8439',\n\tmeasurementId: 'G-L49GGZKYLL'\n};\n\nif (!firebase.apps.length) {\n\tfirebase.initializeApp(config);\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport logo from './assets/logo.png';\n\nimport * as mobilenet from '@tensorflow-models/mobilenet';\n\nimport './firebase';\nimport { storage } from 'firebase';\n\nconst App = () => {\n\tconst [ image, setImage ] = useState([]);\n\tconst [ url, setURL ] = useState('');\n\tconst [ predictions, handlePredictions ] = useState([]);\n\n\tconst handleImage = (e) => {\n\t\tsetImage(e.target.files[0]);\n\t\tconsole.log(image);\n\t};\n\tconst db = storage().ref('/UserPics/' + Math.random());\n\n\tconst uploadImage = async () => {\n\t\tawait db.put(image);\n\t\tdb.getDownloadURL().then((e) => setURL(e));\n\t};\n\n\tconst myPrediction = async () => {\n\t\tconst loadModel = await mobilenet.load();\n\t\tconst img = document.getElementById('image');\n\t\timg.setAttribute('crossOrigin', '');\n\t\tconsole.log(img);\n\t\tawait loadModel.classify(img).then(function(p) {\n\t\t\t// Classify the image\n\t\t\tconsole.log('Predictions: ', p);\n\t\t\thandlePredictions(p);\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Real Time Machine Learning for Image Classification</h1>\n\n\t\t\t<img src={logo} alt=\"img\" />\n\n\t\t\t<br />\n\t\t\t<hr />\n\t\t\t<h1>Instructions:</h1>\n\t\t\t<h5>Add target image</h5>\n\t\t\t<input type=\"file\" onChange={(e) => handleImage(e)} />\n\n\t\t\t<br />\n\t\t\t<h5>Upload the image</h5>\n\t\t\t<button\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tuploadImage(e.target.files);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tUpload\n\t\t\t</button>\n\t\t\t<img id=\"image\" src={url || 'https://via.placeholder.com/400x300'} alt=\"\" crossOrigin=\"anonymous\" />\n\t\t\t<br />\n\t\t\t<h5>Click predict and wait classification to appear</h5>\n\t\t\t<button onClick={() => myPrediction()}> Predict</button>\n\t\t\t<hr />\n\t\t\t{predictions.map((e, k) => (\n\t\t\t\t<li key={k}>\n\t\t\t\t\t<h1>{e.className + ': ' + Math.round(e.probability * 100) + '%'}</h1>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}