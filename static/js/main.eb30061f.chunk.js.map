{"version":3,"sources":["assets/cat.jpg","assets/robot.jpg","firebase.js","App.js","index.js"],"names":["module","exports","firebase","apps","length","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useState","example","handleExample","image","setImage","url","setURL","predictions","handlePredictions","spinner","handleSpinner","showSpinner","robot","handleImage","e","a","async","db","put","getDownloadURL","then","storage","ref","Math","random","className","width","height","style","padding","id","src","photo","alt","onClick","mobilenet","loadModel","loadImage","pic","classify","pred","console","log","myExamplePrediction","map","k","key","round","probability","type","onChange","target","files","img","document","getElementById","setAttribute","p","myRealPrediction","crossOrigin","ReactDOM","render"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,6TCatCC,IAASC,KAAKC,QAClBF,IAASG,cAZK,CACdC,OAAQ,0CACRC,WAAY,6CACZC,YAAa,oDACbC,UAAW,6BACXC,cAAe,yCACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBCAhB,IAqGeC,EArGH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACVC,EADU,KACDC,EADC,OAESF,mBAAS,IAFlB,mBAEVG,EAFU,KAEHC,EAFG,OAGKJ,mBAAS,IAHd,mBAGVK,EAHU,KAGLC,EAHK,OAIwBN,mBAAS,IAJjC,mBAIVO,EAJU,KAIGC,EAJH,OAKgBR,oBAAS,GALzB,mBAKVS,EALU,KAKDC,EALC,KAmBXC,EAAc,WACP,KAARN,IAA0B,IAAZI,GACjBH,EAAOM,KACPF,GAAc,IAEdA,GAAc,IAIVG,EAAc,SAAOC,GAAP,SAAAC,EAAAC,OAAA,uDACnBZ,EAASU,GADU,WAAAC,EAAA,MAGbE,EAAGC,IAAIJ,IAHM,OAInBG,EAAGE,iBAAiBC,MAAK,SAACN,GAAD,OAAOR,EAAOQ,MAJpB,sCAMdG,EAAKI,oBAAUC,IAAI,aAAeC,KAAKC,UAe7C,OACC,yBAAKC,UAAU,OACd,gFAEA,yCA7CM,yBAAKC,MAAM,MAAMC,OAAO,MAAMC,MAAO,CAAEC,QAAS,QAAUC,GAAG,MAAMC,IAAKC,IAAOC,IAAI,UA+CzF,4BAAQR,UAAU,SAASS,QAAS,SAACpB,GAAD,OA7CV,8BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACHoB,OADG,cACrBC,EADqB,kBAAArB,EAAA,MAETsB,oBAAUL,MAFD,cAErBM,EAFqB,kBAAAvB,EAAA,MAGRqB,EAAUG,SAASD,IAHX,OAGrBE,EAHqB,OAK3BC,QAAQC,IAAIF,GACZtC,EAAcsC,GANa,sCA6CiBG,KAA3C,WAGC1C,EAAQ2C,KAAI,SAAC9B,EAAG+B,GAAJ,OACZ,0BAAMC,IAAKD,GACV,4BAAK/B,EAAEW,UAAY,KAAOF,KAAKwB,MAAsB,IAAhBjC,EAAEkC,aAAqB,SAG9D,6BACA,4DAEA,2BACCvB,UAAU,SACVwB,KAAK,OACLC,SAAU,SAACpC,GAAD,OAAOD,EAAYC,EAAEqC,OAAOC,MAAM,KAC5ClB,QAAS,SAACpB,GACTH,IACAE,EAAYC,EAAEqC,OAAOC,MAAM,OAI7B,6BAEA,6BAEA,4BACC3B,UAAU,SACVS,QAAS,YA9Ca,qBAAAnB,EAAAC,OAAA,kEAAAD,EAAA,MACAoB,OADA,cAClBC,EADkB,QAElBiB,EAAMC,SAASC,eAAe,UAChCC,aAAa,cAAe,IAChCf,QAAQC,IAAIW,GAJY,WAAAtC,EAAA,MAKlBqB,EAAUG,SAASc,GAAKjC,MAAK,SAASqC,GAE3ChB,QAAQC,IAAI,gBAAiBvC,EAAOsD,GACpCjD,EAAkBiD,OARK,OAUxB/C,GAAc,GAVU,qCA+CrBgD,GACA/C,MAJF,mBASA,yBAAKmB,GAAG,QAAQC,IAAK1B,EAAK4B,IAAI,GAAGN,OAAO,MAAMD,MAAM,MAAMiC,YAAY,cACtE,kDACCpD,EAAYqC,KAAI,SAAC9B,EAAG+B,GAAJ,OAChB,0BAAMC,IAAKD,GACV,4BAAK/B,EAAEW,UAAY,KAAOF,KAAKwB,MAAsB,IAAhBjC,EAAEkC,aAAqB,SAG9D,+BCrGHY,IAASC,OAAO,kBAAC,EAAD,MAASP,SAASC,eAAe,W","file":"static/js/main.eb30061f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.ca134ef9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/robot.dc28b4a9.jpg\";","import firebase from 'firebase';\n\nconst config = {\n\tapiKey: 'AIzaSyBIUa0UFimfB4uxT4kOGW_2ezcW6fGfw-8',\n\tauthDomain: 'ml-image-recognition-67ee0.firebaseapp.com',\n\tdatabaseURL: 'https://ml-image-recognition-67ee0.firebaseio.com',\n\tprojectId: 'ml-image-recognition-67ee0',\n\tstorageBucket: 'ml-image-recognition-67ee0.appspot.com',\n\tmessagingSenderId: '1030876500796',\n\tappId: '1:1030876500796:web:158f05589ab52a047e8439',\n\tmeasurementId: 'G-L49GGZKYLL'\n};\n\nif (!firebase.apps.length) {\n\tfirebase.initializeApp(config);\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport photo from './assets/cat.jpg';\nimport { loadImage } from 'canvas';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport robot from './assets/robot.jpg';\n\nimport './firebase';\nimport { storage } from 'firebase';\n\nconst App = () => {\n\tconst [example, handleExample] = useState([]);\n\tconst [image, setImage] = useState([]);\n\tconst [url, setURL] = useState('');\n\tconst [predictions, handlePredictions] = useState([]);\n\tconst [spinner, handleSpinner] = useState(true);\n\n\tconst myPhoto = () => {\n\t\treturn <img width=\"500\" height=\"300\" style={{ padding: '10px' }} id=\"img\" src={photo} alt=\"foto \"></img>;\n\t};\n\tconst myExamplePrediction = async () => {\n\t\tconst loadModel = await mobilenet.load();\n\t\tconst pic = await loadImage(photo);\n\t\tconst pred = await loadModel.classify(pic);\n\n\t\tconsole.log(pred);\n\t\thandleExample(pred);\n\t};\n\n\tconst showSpinner = () => {\n\t\tif (url === '' && spinner === true) {\n\t\t\tsetURL(robot);\n\t\t\thandleSpinner(false);\n\t\t} else {\n\t\t\thandleSpinner(true);\n\t\t}\n\t};\n\n\tconst handleImage = async (e) => {\n\t\tsetImage(e);\n\n\t\tawait db.put(e);\n\t\tdb.getDownloadURL().then((e) => setURL(e));\n\t};\n\tconst db = storage().ref('/UserPics/' + Math.random());\n\n\tconst myRealPrediction = async () => {\n\t\tconst loadModel = await mobilenet.load();\n\t\tconst img = document.getElementById('image');\n\t\timg.setAttribute('crossOrigin', '');\n\t\tconsole.log(img);\n\t\tawait loadModel.classify(img).then(function(p) {\n\t\t\t// Classify the image\n\t\t\tconsole.log('Predictions: ', image, p);\n\t\t\thandlePredictions(p);\n\t\t});\n\t\thandleSpinner(true);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Machine Learning real time image classification </h1>\n\n\t\t\t<h5>Example: </h5>\n\t\t\t{myPhoto()}\n\t\t\t<button className=\"button\" onClick={(e) => myExamplePrediction(e)}>\n\t\t\t\tPredict\n\t\t\t</button>\n\t\t\t{example.map((e, k) => (\n\t\t\t\t<span key={k}>\n\t\t\t\t\t<h5>{e.className + ': ' + Math.round(e.probability * 100) + '%'}</h5>\n\t\t\t\t</span>\n\t\t\t))}\n\t\t\t<br />\n\t\t\t<h2>Browse and Upload an image: </h2>\n\n\t\t\t<input\n\t\t\t\tclassName=\"button\"\n\t\t\t\ttype=\"file\"\n\t\t\t\tonChange={(e) => handleImage(e.target.files[0])}\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\tshowSpinner();\n\t\t\t\t\thandleImage(e.target.files[0]);\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<br />\n\n\t\t\t<hr />\n\n\t\t\t<button\n\t\t\t\tclassName=\"button\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tmyRealPrediction();\n\t\t\t\t\tshowSpinner();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tClassification:\n\t\t\t</button>\n\t\t\t<img id=\"image\" src={url} alt=\"\" height=\"300\" width=\"500\" crossOrigin=\"anonymous\" />\n\t\t\t<h1>AI Classification:</h1>\n\t\t\t{predictions.map((e, k) => (\n\t\t\t\t<span key={k}>\n\t\t\t\t\t<h5>{e.className + ': ' + Math.round(e.probability * 100) + '%'}</h5>\n\t\t\t\t</span>\n\t\t\t))}\n\t\t\t<br />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}